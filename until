
from scipy.ndimage import zoom
import os
import torch
from tqdm import tqdm
import SimpleITK as sitk
import numpy as np
import glob
import pydicom as dicom
import nrrd            # pip install pynrrd, if pynrrd is not already installed
import nibabel as nib  # pip install nibabel, if nibabel is not already installed
import numpy as np
# from data_loader import *
import cv2
import imageio
import shutil
import SimpleITK as itk
from PIL import Image
import chardet
import zipfile
import shutil
import pandas as pd


def unzip_single(src_file, dest_dir):
    with zipfile.ZipFile(src_file, 'r') as zf:
        for filename in zf.namelist():
            encodeInfo = chardet.detect(filename.encode('cp437'))
            target_filename = dest_dir + '/' + filename.encode('cp437').decode(encodeInfo['encoding'])
            dirname = os.path.dirname(target_filename)
            # print('dirname;', dirname)
            if not os.path.exists(dirname) and dirname != '':
                os.makedirs(dirname)
            if target_filename != '' and target_filename[-1] == '/':
                continue
            # print('extracting:', target_filename)
            with open(target_filename, 'wb') as output_file:
                with zf.open(filename, 'r') as origin_file:
                    shutil.copyfileobj(origin_file, output_file)

def dcm2nii(dcms_path, nii_path, paient_id):
    # 0.判断三维图片是否颠倒
    dcm_dir = glob.glob(dcms_path + '/*.dcm')
    # print('dcm_dir', dcm_dir)
    slices = [dicom.read_file(s, stop_before_pixels=True) for s in dcm_dir]
    # for s in dcm_dir:
    #     print('ssssss;', s)
    #     slices = dicom.read_file(s, stop_before_pixels=True)
    # slices.sort_values(0, ascending=False)
    slices.sort(key=lambda x: float(x.ImagePositionPatient[2]))
    fns = [slice.filename for slice in slices]
    # print('fns;', fns)
    dicom_0 = dicom.read_file(fns[0]).InstanceNumber
    dicom_1 = dicom.read_file(fns[1]).InstanceNumber
    print('dicom_0;', dicom_0)
    print('dicom_1;', dicom_1)
    flat = False
    if dicom_1 - dicom_0 < 0:
        flat = True
    # 1.构建dicom序列文件阅读器，并执行（即将dicom序列文件“打包整合”）
    reader = sitk.ImageSeriesReader()
    dicom_names = reader.GetGDCMSeriesFileNames(dcms_path)
    reader.SetFileNames(dicom_names)
    image2 = reader.Execute()
    # 2.将整合后的数据转为array，并获取dicom文件基本信息
    image_array = sitk.GetArrayFromImage(image2)  # z, y, x
    origin = image2.GetOrigin()  # x, y, z
    spacing = image2.GetSpacing()  # x, y, z
    direction = image2.GetDirection()  # x, y, z
    # 3.将array转为img，并保存为.nii.gz
    image3 = sitk.GetImageFromArray(image_array)
    image3.SetSpacing(spacing)
    image3.SetDirection(direction)
    image3.SetOrigin(origin)
    sitk.WriteImage(image3, nii_path + '/' + str(paient_id) + '.nii.gz')
    nii_path = nii_path + '/' + str(paient_id) + '.nii.gz'

    return nii_path, flat
    
    def find_image1(data_path, save_nii_path, save_nii_path_mask, save_mask_train, save_image_train, save_mask_test, save_image_test):
    i = 0
    data_path_nii = glob.glob(data_path + '/*/*/*' + '*.nii.gz')
    for path in tqdm(data_path_nii):
        name = os.path.basename(path)
        if name[:2] == 'LN':
            continue
        dir_name = os.path.basename(os.path.dirname(path))
        paient_id = os.path.basename(os.path.dirname(os.path.dirname(path)))  # 获取病人id
        if paient_id == 'M522050':
            continue
        data_path_dcm = os.path.join(data_path, paient_id, dir_name)
        print('第几个', i+1)
        save_nii, flat = dcm2nii(data_path_dcm, save_nii_path, paient_id)
        dcm_dir = glob.glob(data_path_dcm + '/*.dcm')

        # 重采样 归一化
        # nii_img = sitk.ReadImage(save_nii)
        # original_spacing = nii_img.GetSpacing()  # get spacing
        # original_size = nii_img.GetSize()        # get size
        # new_save_nii = new_spacing(original_size, original_spacing, nii_img, save_nii_path, paient_id)
        # mask = sitk.ReadImage(path)
        # original_spacing0 = mask.GetSpacing()
        # original_size0 = mask.GetSize()
        # new_path = new_spacing(original_size0, original_spacing0, mask, save_nii_path, dir_name)

        mask = sitk.ReadImage(path)
        mask_arr = sitk.GetArrayFromImage(mask)
        if flat is True:
            mask_arr = mask_arr[::-1, ::, ::]
            image3 = sitk.GetImageFromArray(mask_arr)
            sitk.WriteImage(image3, save_nii_path_mask + '/' + str(paient_id) + '.nii.gz')
            save_nii_mask = save_nii_path_mask + '/' + str(paient_id) + '.nii.gz'
        mask_temp = mask_arr
        mask_coord = np.where(mask_temp)
        mask_zyx = np.zeros([1, 2])
        mask_zyx[0, 0] = min(mask_coord[0])
        mask_zyx[0, 1] = max(mask_coord[0])+1

        if i < 700:
            save_mask_path = save_mask_train
            save_image_path = save_image_train
        else:
            save_mask_path = save_mask_test
            save_image_path = save_image_test
        niito2D(save_nii_mask, save_mask_path, mask_zyx[0, 0], mask_zyx[0, 1], paient_id)
        niito2D(save_nii, save_image_path, mask_zyx[0, 0], mask_zyx[0, 1], paient_id)
        i = i+1
